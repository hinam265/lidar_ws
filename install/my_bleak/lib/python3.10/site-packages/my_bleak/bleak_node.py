from sensor_msgs.msg import Imu

import asyncio
from bleak import BleakClient
import numpy as np

import rclpy
from rclpy.node import Node

class DOTPublisher(Node):

    def __init__(self):
        super().__init__('imu_publisher')

        # Create a publisher for the `imu_data` topic.
        self.publisher = self.create_publisher(Imu, 'imu_data', 10)

    # Define a callback function that will be executed when new data is received on the topic.
    def callback(self, sender, data):
        # Encode the data
        encode_data = encode_free_acceleration(data)
        # Remove the bracket
        encode_data = str(encode_data)[2:-2]

        # Split the encoded data into a list
        encode_data_list = encode_data.split(',')

        # Create a ROS2 message
        imu_msg = Imu()
        imu_msg.header.stamp = self.get_clock().now().to_msg()
        imu_msg.orientation.w = float(encode_data_list[1])
        imu_msg.orientation.x = float(encode_data_list[2])
        imu_msg.orientation.x = float(encode_data_list[3])
        imu_msg.orientation.y = float(encode_data_list[4])
        imu_msg.linear_acceleration.x = float(encode_data_list[5])
        imu_msg.linear_acceleration.y = float(encode_data_list[6])
        imu_msg.linear_acceleration.z = float(encode_data_list[7])

        print(f"{imu_msg.orientation} - {imu_msg.linear_acceleration}")


        # Publish the message
        self.publisher.publish(imu_msg)

    async def connect(self, address):
        # Connect to the DOT and stream data.
        async with BleakClient(address) as client:
            print(f"Client connection to `{client.address}: {client.is_connected}")

            # Subscribe to data notifications.
            payload_type_uuid = "15172003-4947-11e9-8646-d663bd873d93"
            await client.start_notify(payload_type_uuid, self.callback)

            # Set and turn on measurement mode.
            measurement_char_uuid = "15172001-4947-11e9-8646-d663bd873d93"
            binary_message = b"\x01\x01\x03"
            await client.write_gatt_char(measurement_char_uuid, binary_message, response=True)

            # stream data until Ctrl+C is pressed.
            while True:
                try:
                    await asyncio.sleep(0.1)
                except asyncio.CancelledError:
                    break

def encode_free_acceleration(bytes_):
    data_segments = np.dtype([
        ('timestamp', np.uint32),
        ('w', np.float32),
        ('yaw', np.float32),
        ('pitch', np.float32),
        ('roll', np.float32),
        ('x', np.float32),
        ('y', np.float32),
        ('z', np.float32),
        ('zero_padding', np.uint32),
        ('zero_padding_2', np.uint32)
        ])

    formatted_data = np.frombuffer(bytes_, dtype=data_segments)
    return formatted_data

def main(args=None):
    rclpy.init(args=args)

    node = DOTPublisher()

    # Connect to the DOT.
    asyncio.run(node.connect('D4:22:CD:00:62:76'))

    # Spin the node indefinitely.
    rclpy.spin(node)

    # Shutdown the ROS2 node.
    rclpy.shutdown()

if __name__ == '__main__':
    main()
